from os import path as op
from collections import namedtuple
from datetime import datetime
from xml.etree import ElementTree as et


__all__ = ('SitemapConfig', 'Sitemap')
__author__ = 'Denis Kazakov'
__version__ = '0.1.0'
# todo: lastmod of not changed
# todo: regexp

Record = namedtuple('Record', 'loc lastmod priority')


class SitemapConfig:
    """A class to set configurations

    FOLDER - a tuple of folders to make path where to put a sitemap.xml
    IGNORED - URIs to be ignored
    INDEX_PRIORITY - a priority of the index page
    CONTENT_PRIORITY - a priority of pages generated by models
    ALTER_PRIORITY - a priority of other pages
    """

    FOLDER = ('..', )
    IGNORED = ['/admin', '/edit', '/static', ]
    INDEX_PRIORITY = CONTENT_PRIORITY = ALTER_PRIORITY = None


class Sitemap:
    """A sitemap generator"""

    def __init__(self, app, base_url):
        self.config = SitemapConfig()
        self.app = app
        self.url = base_url
        self.start = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
        self.links = [Record(self.url, self.start, self.config.INDEX_PRIORITY), ]
        self.rules = [pattern.rule for pattern in list(app.url_map.iter_rules())]
        self.models = {}
        self.updated = {}

    def _exclude(self):
        """Excludes URIs in exclusions from app_uri"""
        public_uris = self.rules

        for item in self.config.IGNORED:
            public_uris = [uri for uri in public_uris if item not in uri]

        return public_uris

    def _replace_patterns(self):
        """Replaces '/<slug>/...' with real URIs

        :returns a list of namedtuples Record
        """
        uris = self._exclude()

        # todo: заменить на проверку по регуляркам, может быть <type:asdsa>
        # patterns = ('/<slug>', '/<int:page>')
        pattern = '/<slug>'

        for uri in uris:
            if pattern in uri:
                prefix = uri.split(pattern)[0]
                end = uri.split(pattern)[-1]
                prefix = '/' if len(prefix) == 0 else prefix
                model, slug, updated, priority = self.models.get(prefix)
                prepared = []

                try:
                    for record in model.query.all():
                        if slug:
                            uri = getattr(record, slug)
                            loc = f'{self.url}{prefix}/{uri}{end}'
                        else:
                            loc = f'{self.url}{prefix}{end}'

                        if updated:
                            lastmod = getattr(record, updated)
                            if isinstance(lastmod, datetime):
                                lastmod = lastmod.strftime('%Y-%m-%dT%H:%M:%S')
                        else:
                            lastmod = None

                        prepared.append(Record(loc, lastmod, priority))
                except AttributeError:
                    pass

                self.links.extend(prepared)
            else:
                self.links.append(Record(self.url + uri, self.start, self.config.ALTER_PRIORITY))

    def add_rule(self, path: str, model, slug='slug', updated: str=None, priority: float=None):
        """Adds a rule to the builder to generate urls by a template using models of an app

        :param path: a part of URI is used to get a page generated through a model
        :param model: a model of an app that has a slug, e.g. an instance of SQLAlchemy.Model
        :param slug: a slug attribute of this model
        :param updated: an attribute of this model which is instance of the datetime object
        :param priority: a priority of URL to be set
        """
        priority = priority or self.config.CONTENT_PRIORITY

        if priority:
            assert 0.0 < priority <= 1.0, 'Priority should be a float between 0 and 1.0'

        self.models.update({path: (model, slug, updated, priority)})

    def build(self):
        """Builds an XML file. The system user of the app should have rights to write files"""
        self._replace_patterns()

        attrs = {
            'xmlns:xsi': "http://www.w3.org/2001/XMLSchema-instance",
            'xmlns': "http://www.sitemaps.org/schemas/sitemap/0.9",
            'xsi:schemaLocation':
                "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"
        }

        if self.config.FOLDER:
            filename = op.join(*self.config.FOLDER, 'sitemap.xml')
        else:
            filename = 'sitemap.xml'

        url_set = et.Element('urlset', attrs)
        sub = et.SubElement

        for record in self.links:
            url = sub(url_set, "url")
            sub(url, "loc").text = record.loc

            if record.lastmod:
                sub(url, "lastmod").text = record.lastmod

            if record.priority:
                sub(url, "priority").text = str(record.priority)

        tree = et.ElementTree(url_set)
        tree.write(filename, xml_declaration=True, encoding='UTF-8')


def test():
    pass


if __name__ == '__main__':
    test()
